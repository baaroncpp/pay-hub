
//region Begin Code
/*
This file has been generated by Jooqify.groovy [Fri Jan 29 19:05:34 EAT 2021]
*/
import com.fasterxml.jackson.annotation.JsonInclude;
import com.awamo.microservice.processengine.utils.SystemDateFormat;
import com.fasterxml.jackson.annotation.JsonFormat;
import groovy.lang.Tuple2;
import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Select;
import org.jooq.Table;
import org.jooq.impl.DSL;
import javax.ws.rs.core.MultivaluedMap;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.math.BigInteger;
import java.sql.Timestamp;
import java.sql.Date;
import java.util.List;


/*
SELECT
    td.id AS id_bigint,
    tr.id AS 'request.id_bigint',
    maw.id AS 'wallet.awamoWalletId_bigint',
    mtw.id AS 'wallet.walletId_bigint',
    mtw.account_no AS accountNumber_string,
    td.amount AS amount_decimal,
    tr.amount AS 'request.amount_decimal',
    tr.tx_type  AS 'request.type_string',
    td.tx_type  AS 'detail.type_string',
    tr.tx_status  AS status
FROM
    m_awamo_wallet maw
INNER JOIN m_tenant_wallet mtw ON
    mtw.id = maw.wallet_id
INNER JOIN w_wallet_transaction_request tr ON
    tr.wallet_id = mtw.id
INNER JOIN m_wallet_transaction_detail td ON
    td.wallet_tx_request_id = tr.id
*/
public class JooqQuery{

    public static final String FIELD_ID = "id";
    public static final String FIELD_REQUEST_ID = "request.id";
    public static final String FIELD_WALLET_AWAMO_WALLET_ID = "wallet.awamoWalletId";
    public static final String FIELD_WALLET_WALLET_ID = "wallet.walletId";
    public static final String FIELD_ACCOUNT_NUMBER = "accountNumber";
    public static final String FIELD_AMOUNT = "amount";
    public static final String FIELD_REQUEST_AMOUNT = "request.amount";
    public static final String FIELD_REQUEST_TYPE = "request.type";
    public static final String FIELD_DETAIL_TYPE = "detail.type";
    public static final String FIELD_STATUS = "status";

    private final Field<BigInteger> id = DSL.field("td.id", BigInteger.class);
    private final Field<BigInteger> requestId = DSL.field("tr.id", BigInteger.class);
    private final Field<BigInteger> walletAwamoWalletId = DSL.field("maw.id", BigInteger.class);
    private final Field<BigInteger> walletWalletId = DSL.field("mtw.id", BigInteger.class);
    private final Field<String> accountNumber = DSL.field("mtw.account_no", String.class);
    private final Field<BigDecimal> amount = DSL.field("td.amount", BigDecimal.class);
    private final Field<BigDecimal> requestAmount = DSL.field("tr.amount", BigDecimal.class);
    private final Field<String> requestType = DSL.field("tr.tx_type", String.class);
    private final Field<String> detailType = DSL.field("td.tx_type", String.class);
    private final Field<Object> status = DSL.field("tr.tx_status", Object.class);

    private final Table<?> coreTable = DSL.table("m_awamo_wallet maw\n" 
         + "INNER JOIN m_tenant_wallet mtw ON mtw.id = maw.wallet_id\n" 
         + "INNER JOIN w_wallet_transaction_request tr ON tr.wallet_id = mtw.id\n" 
         + "INNER JOIN m_wallet_transaction_detail td ON td.wallet_tx_request_id = tr.id\n" 
        );

    private JooqFilter jooqFilter;

    public JooqQuery(){
        initFilterer();
    }

    public Select<Record> query(MultivaluedMap params){
        final Tuple2<Integer, Integer> limitAndOffset = jooqFilter.paginationParams(params);
        return DSL.select(jooqFilter.selectFields(params))
        .from(coreTable)
        .where(
            jooqFilter.whereClause(params))
        .orderBy(jooqFilter.sortFields(params))
        .limit(limitAndOffset.getFirst(), limitAndOffset.getSecond());
    }

    private void initFilterer(){
        jooqFilter = new JooqFilter()
            .fields(
                dbField(id, FIELD_ID),
                dbField(requestId, FIELD_REQUEST_ID),
                dbField(walletAwamoWalletId, FIELD_WALLET_AWAMO_WALLET_ID),
                dbField(walletWalletId, FIELD_WALLET_WALLET_ID),
                dbField(accountNumber, FIELD_ACCOUNT_NUMBER),
                dbField(amount, FIELD_AMOUNT),
                dbField(requestAmount, FIELD_REQUEST_AMOUNT),
                dbField(requestType, FIELD_REQUEST_TYPE),
                dbField(detailType, FIELD_DETAIL_TYPE),
                dbField(status, FIELD_STATUS)
            );
    }

    @lombok.Data
    @lombok.NoArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class Result{
        private BigInteger id;
        private String accountNumber;
        private BigDecimal amount;
        private Object status;

        private Request request = new Request();
        private Wallet wallet = new Wallet();
        private Detail detail = new Detail();

        @lombok.Data
        @lombok.NoArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class Request{
            private BigInteger id;
            private BigDecimal amount;
            private String type;
        }

        @lombok.Data
        @lombok.NoArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class Wallet{
            private BigInteger awamoWalletId;
            private BigInteger walletId;
        }

        @lombok.Data
        @lombok.NoArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class Detail{
            private String type;
        }

    }

    private static JpaSessionManager db(){
        return PeJerseyApp.service(JpaSessionManager.class);
    }

    public static RecordsList<Result> listAndCount(MultivaluedMap<String,?> map){
        return new RecordsList<>(count(map).intValue(), list(map));
    }

    public static List<Result> list(MultivaluedMap<String,?> map){
        return db().callInSql(d -> d.jooq().fetch(new JooqQuery().query(map)).into(Result.class));
    }

    public static Long count(MultivaluedMap<String,?> map){
        return db().callInSql(d -> d.jooq().fetchOne(new JooqQuery().query(JooqHelpers.addCountParams(map))).get(0, Long.class));
    }

}

//endregion
